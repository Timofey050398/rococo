plugins {
    id 'org.springframework.boot' version '3.4.2'
    id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'timofeyqa'
version = '0.0.1-SNAPSHOT'

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation "org.springframework.kafka:spring-kafka:${project.ext.springKafkaVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
    implementation "org.flywaydb:flyway-mysql:${project.ext.flywayVersion}"
    implementation "net.coobird:thumbnailator:${project.ext.thumbnailatorVersion}"
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    runtimeOnly "com.mysql:mysql-connector-j:${project.ext.mysqlDriverVersion}"
    implementation "org.glassfish:jakarta.el:${project.ext.jakartaElVersion}"
    implementation "org.hibernate.validator:hibernate-validator:${project.ext.hibernateValidatorVersion}"


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.h2database:h2:${project.ext.h2Version}"
}

jib {
    container {
        ports = ['8089']
        jvmFlags = ["-Dspring.profiles.active=${System.env.PROFILE}"]
        environment = [
                'VAULT_TOKEN': "${System.env.VAULT_TOKEN}".toString(),
                'TZ'         : 'Europe/Moscow'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Timofey Litvinov',
                'version'   : "${project.version}".toString()
        ]
    }
    from {
        image = "${project.ext.dockerImage}"
        platforms {
            platform {
                architecture = "${project.ext.dockerArch}"
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}-${System.env.PROFILE}"
        tags = ['latest', "${project.version}"]
    }
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test

tasks.named('bootJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

tasks.named('test') {
    useJUnitPlatform()
}