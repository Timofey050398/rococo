plugins {
	id 'org.springframework.boot' version '3.4.2'
	id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'timofeyqa'
version = '0.0.1-SNAPSHOT'

dependencies {
	implementation project(':rococo-grpc')
	implementation "net.devh:grpc-server-spring-boot-starter:${project.ext.springGrpcVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
	implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
	implementation "org.flywaydb:flyway-mysql:${project.ext.flywayVersion}"
	implementation "net.coobird:thumbnailator:${project.ext.thumbnailatorVersion}"
	annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
	compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
	runtimeOnly "com.mysql:mysql-connector-j:${project.ext.mysqlDriverVersion}"
	implementation "jakarta.validation:jakarta.validation-api:${project.ext.jakartaValidationVersion}"
	implementation "org.mapstruct:mapstruct:${project.ext.mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${project.ext.mapstructVersion}"


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "com.h2database:h2:${project.ext.h2Version}"
}

jib {
	container {
		ports = ['8092']
		jvmFlags = ["-Dspring.profiles.active=${System.env.PROFILE}"]
		environment = [
				'VAULT_TOKEN': "${System.env.VAULT_TOKEN}".toString(),
				'TZ'         : 'Europe/Moscow'
		]
		creationTime = 'USE_CURRENT_TIMESTAMP'
		labels = [
				'maintainer': 'Timofey Litvinov',
				'version'   : "${project.version}".toString()
		]
	}
	from {
		image = "${project.ext.dockerImage}"
		platforms {
			platform {
				architecture = "${project.ext.dockerArch}"
				os = 'linux'
			}
		}
	}
	to {
		image = "${project.ext.dockerHubName}/${project.name}-${System.env.PROFILE}"
		tags = ['latest', "${project.version}"]
	}
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test

tasks.named('bootJar') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('printVersion') {
	doLast {
		println project.version
	}
}

tasks.named('test') {
	useJUnitPlatform()
}